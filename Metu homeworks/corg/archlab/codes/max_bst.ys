

# BURAK BAHAR 2380137

# Prepare the stack pointer, the arguments, and call find_max
.pos 0
    irmovq Stack, %rsp
    irmovq root, %rdi
    call max_bst
    halt
 
max_bst:
    xorq %rax, %rax         # max = 0
    andq %rdi, %rdi         #if root == null
    jne check
    ret
loop:
    mrmovq 16(%rdi), %rdi    # root = root->right
check:
    mrmovq 16(%rdi), %r9
    andq %r9, %r9         # root->right?
    jne loop                # if root->right!= NULL, continue the loop
    mrmovq (%rdi), %r8
    rrmovq %r8, %rax        # max = value
    ret                     # return if list == NULL

# Example linked list data, byte 0x200 far from code
.pos 0x200
root:
    .quad 17
    .quad node6
    .quad node24
node6:
    .quad 6
    .quad node4
    .quad node11
node4:
    .quad 4
    .quad node3
    .quad node5
node3:
    .quad 3
    .quad 0
    .quad 0
node5:
    .quad 5
    .quad 0 # Remember that 0 is null.
    .quad 0
node11:
    .quad 11
    .quad node8
    .quad 0
node8:
    .quad 8
    .quad 0
    .quad 0
node24:
    .quad 24
    .quad node19
    .quad node40
node19:
    .quad 19
    .quad 0
    .quad 0
node40:
    .quad 40
    .quad 0
    .quad node52
node52:
    .quad 52
    .quad 0
    .quad 0

# Stack position, byte 0x800 far from data
.pos 0x800
Stack:


